c(mean(iv.rej[,j]),sd(iv.rej[,j]),quantile(iv.rej[,j], probs = c(0.1, 0.5 ,0.9))))
View(iv.results)
c(mean(iv.rej[,1]),sd(iv.rej[,1]),quantile(iv.rej[,1], probs = c(0.1, 0.5 ,0.9)))
rm(iv.results)
# Combine results for each gamma
iv.results = foreach(j=1:length(gamma.vec)) %do%
rbind(c(mean(iv.beta[[j]]),sd(iv.beta[[j]]),quantile(iv.beta[[j]], probs = c(0.1, 0.5 ,0.9))),
c(mean(iv.se[[j]]),sd(iv.se[[j]]),quantile(iv.se[[j]], probs = c(0.1, 0.5 ,0.9))),
c(mean(iv.rej[,j]),sd(iv.rej[,j]),quantile(iv.rej[,j], probs = c(0.1, 0.5 ,0.9))))
View(iv.results)
lm(X[[1]][,1]~W[,1,1]-1)
ans=lm(X[[1]][,1]~W[,1,1]-1)
summary(ans)
summary(ans)[["coefficients"]]
summary(ans)[["statistic"]]
summary(ans)
summary(ans)["F-statistic"]
summary(ans)[["F-statistic"]]
ans$fstatstic
summary(ans)$fstatistic
summary(ans)$fstatistic["value"]
summary(ans)$fstatistic[1]
typeof(summary(ans)$fstatistic)
typeof(summary(ans)$fstatistic[1])
# Run first-stage regression and extract F-statistics
iv.f       = foreach(j=1:length(gamma.vec)) %do%
sapply(1:M, function(i) summary(lm(X[[j]][,i]~W[,1,i]-1))$fstatistic[1])
View(iv.f)
rm(iv.results)
# Combine results for each gamma
iv.results = foreach(j=1:length(gamma.vec)) %do%
rbind(c(mean(iv.beta[[j]]),sd(iv.beta[[j]]),quantile(iv.beta[[j]], probs = c(0.1, 0.5 ,0.9))),
c(mean(iv.se[[j]]),sd(iv.se[[j]]),quantile(iv.se[[j]], probs = c(0.1, 0.5 ,0.9))),
c(mean(iv.rej[,j]),sd(iv.rej[,j]),quantile(iv.rej[,j], probs = c(0.1, 0.5 ,0.9))),
c(mean(iv.f[[j]]),sd(iv.f[[j]]),quantile(iv.f[[j]], probs = c(0.1, 0.5 ,0.9))))
View(iv.results)
iv.results[[1]]
iv.results[[2]]
iv.results[[3]]
iv.results[[4]
iv.results[[4]]
# Run OLS for each gamma and each simulation -- this spits out 5000 lm's for each gamma
ols.big = foreach(j=1:length(gamma.vec)) %do%
lapply(1:M, function(i) lm(Y[,i]~X[[j]][,i]-1))
# Extract point estimates, standard errors, t-stats
ols.beta = foreach(j=1:length(gamma.vec)) %do%
sapply(1:M, function(i) ols.big[[j]][[i]]$coefficients)
ols.se   = foreach(j=1:length(gamma.vec)) %do%
sapply(1:M, function(i) coef(summary(ols.big[[j]][[i]]))[,"Std. Error"])
ols.t    = sapply(1:length(gamma.vec),function(j) ols.beta[[j]]/ols.se[[j]])
ols.rej  = ifelse(ols.t>1.96,1,0)
rm(ols.results)
# Compute desired summary statistics across the simulations (spits out a list containing results for each gamma)
ols.results = foreach(j=1:length(gamma.vec)) %do%
rbind(c(mean(ols.beta[[j]]),sd(ols.beta[[j]]),quantile(ols.beta[[j]], probs = c(0.1, 0.5 ,0.9))),
c(mean(ols.se[[j]]),sd(ols.se[[j]]),quantile(ols.se[[j]], probs = c(0.1, 0.5 ,0.9))),
c(mean(ols.rej[,j]),sd(ols.rej[,j]),quantile(ols.rej[,j], probs = c(0.1, 0.5 ,0.9))))
View(ols.results)
# Remove big objects!
rm(ols.big,ols.beta,ols.se,ols.t,ols.rej)
# Remove big objects!
rm(iv.big,iv.beta,iv.se,iv.t,iv.rej,iv.f)
round(iv.results[[1]])
round(iv.results[[1]],2)
round(iv.results[[1]],3)
round(iv.results[[1]],3)
round(ols.results[[1]],3)
round(ols.results[[2]],3)
round(iv.results[[2]],3)
round(iv.results[[3]],3)
round(ols.results[[3]],3)
round(iv.results[[4]],3)
round(ols.results[[4]],3)
######################################################################
# Load packages, clear workspace
######################################################################
rm(list = ls())             #clear workspace
## ECON675: ASSIGNMENT 5
## Q2: WEAK INSTRUMENTS SIMULATIONS
## Anirudh Yadav
## 11/19/2018
######################################################################
# Load packages, clear workspace
######################################################################
rm(list = ls())             #clear workspace
library(foreach)            #for looping
library(data.table)         #for data manipulation
library(Matrix)             #fast matrix calcs
library(ggplot2)            #for pretty plots
library(sandwich)           #for variance-covariance estimation
library(xtable)             #for latex tables
library(rdrobust)           #for RD plots and other stuff
library(rddensity)          #for RD density continuity tests
library(rdlocrand)          #for RD randomization inference
options(scipen = 999)       #forces R to use normal numbers instead of scientific notation
######################################################################
# Input data
######################################################################
setwd("/Users/Anirudh/Desktop/GitHub/PhD_Coursework/ECON675/HW6")
data <- as.data.table(read.csv('HeadStart.csv'))
######################################################################
# [2.1]A RD Plots of pre-intervention mortality
######################################################################
# Evenly-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "es",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-es.pdf')
dev.off()
# Evenly-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "esmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-esmv.pdf')
dev.off()
# Quantile-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qs",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qs.pdf')
dev.off()
# Quantile-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qsmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qsmv.pdf')
dev.off()
######################################################################
# [2.1]B Formal falsification tests
######################################################################
## Exact binomial tests for different windows around the cutoff
# Vector of windows
h.vec = seq(0.3,1.3,0.2)
# Get running variable
x     = data[,povrate60]
# Number of observations just above and below the cutoff
N.l   = sapply(1:length(h.vec),function(i) sum(x >= -h.vec[i] & x <=0))
N.u   = sapply(1:length(h.vec),function(i) sum(x >= 0 & x <= h.vec[i]))
# Total number of observations in the window
N.t   = N.l + N.u
# Conduct exact binomial tests (p=0.5), where success is treatment and store p-vals
binom.pvals = sapply(1:length(h.vec),function(i) binom.test(N.u[i],N.t[i])$p.value)
# Put results together for latex
binom.results = cbind(h.vec,N.l,N.u,binom.pvals)
xtable(binom.results,digits = c(0,1,0,0,3))
## Continuity in density tests (defaults are triangular kernel, jackknife SEs)
rdtest = rddensity(x)
######################################################################
# [2.2]A Global polynomial regression - constant treatment effect
######################################################################
# Create treatment dummy for regressions
treat=ifelse(data[,povrate60]>=0,1,0)
# Get outcome variable
Y = data[,mort_related_post]
# Generate covariates for polynomial regressions
X.pol = cbind(x,x^2,x^3,x^4,x^5,x^6)
# Run polynomial regressions
global.regs = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))]))
# Get point estimates
global.betas = sapply(1:4,function(i) global.regs[[i]]$coefficients[2])
# Get robust SEs
global.SEs   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs[[i]],"HC2")))[2])
# Put results together
global.results = rbind(global.betas, global.SEs)
colnames(global.results) = c(3,4,5,6)
xtable(global.results,digits=c(0,2,2,2,2))
# Plot fitted values and data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post")
points(x,global.regs[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-const.pdf')
dev.off()
######################################################################
# [2.2]B Global polynomial regression - fully interacted model
######################################################################
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + treat*X.pol[,c(1:(3+i))]))
# Get point estimates of treatment effect
global.betas.full = sapply(1:4,function(i) global.regs.full[[i]]$coefficients[2])
# Get robust SEs
global.SEs.full   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs.full[[i]],"HC2")))[2])
# Put results together
global.results.full = rbind(global.betas.full, global.SEs.full)
colnames(global.results.full) = c(3,4,5,6)
xtable(global.results.full,digits=c(0,2,2,2,2))
# Plot fitted values + data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post")
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-full.pdf')
dev.off()
######################################################################
# [2.3] Robust local polynomial methods
######################################################################
# MSE-optimal RD treatment effect estimates
rd.regs = lapply(0:2, function(i) rdrobust(Y,x,p=i,all=TRUE))
# Combine results for different polynomial orders
rd.p0   = cbind(rd.regs[[1]]$coef,rd.regs[[1]]$se,rd.regs[[1]]$ci)
rd.p1   = cbind(rd.regs[[2]]$coef,rd.regs[[2]]$se,rd.regs[[2]]$ci)
rd.p2   = cbind(rd.regs[[3]]$coef,rd.regs[[3]]$se,rd.regs[[3]]$ci)
xtable(rd.p0,digits=c(0,2,2,2,2))
xtable(rd.p1,digits=c(0,2,2,2,2))
xtable(rd.p2,digits=c(0,2,2,2,2))
# Placebo tests
rd.rob1 = rdrobust(data[,mort_related_pre],x,p=1,all=TRUE)
rd.rob2 = rdrobust(data[,mort_injury_post],x,p=1,all=TRUE)
rd.rob1.res   = cbind(rd.rob1$coef,rd.rob1$se,rd.rob1$ci)
rd.rob2.res   = cbind(rd.rob2$coef,rd.rob2$se,rd.rob2$ci)
xtable(rd.rob1.res,digits=c(0,2,2,2,2))
xtable(rd.rob2.res,digits=c(0,2,2,2,2))
# Different kernel/bandwiths
# Donut hole
1:1:10
1:1:10[1]
seq(1,10,1)
seq(1,10,1)[1]
?which
max(which(x <= 0))
which(x <= 0)
x
count(which(x<=0))
length(which(x<=0))
length(x)
sum(x<=0)
x.order = sort(x)
x.order
max(which(x.order<=0))
data.order = data[order(povrate60)]
View(data.order)
View(data)
View(data.order)
# Order data according to running variable
data.ordered = data[order(povrate60)]
x.ordered    = data.ordered[,povrate60]
y.ordered    = data.ordered[,mort_related_post]
# Get indexes of closest counties to the cutoff
i.below        = max(which(x.ordered<=0))
i.above        = min(which(x.ordered>=0))
drop.vec = seq(0,9,1)
x.ordered[-c(i.below,i.above)]
length(x.ordered[-c(i.below,i.above)])
x.ordered[-seq(i.below,i.above,1)]
x.ordered[-seq(i.below-1,i.above+1,1)]
# Run rdrobust for each donut hole!
rd.donut = lapply(0:9,function(i) rdrobust(y.ordered[i.below-i,i.above+i],x.ordered[-seq(i.below-i,i.above+i)]))
# Run rdrobust for each donut hole!
rd.donut = lapply(0:9,function(i) rdrobust(y.ordered[-seq(i.below-i,i.above+i,1)],x.ordered[-seq(i.below-i,i.above+i,1)]))
View(rd.donut)
View(rd.donut)
rd.donut[[1]]$coef[3]
rd.donut.results = []
rd.donut.results = numeric()
append(rd.donut.results,1)
rd.donut.results
# Get point estimates
rd.donut.results = numeric()
for (t in 1:10){
x = rd.donut[[i]]$coef[3]
rd.donut.results = append(rd.donut.results,x)
}
# Get point estimates
rd.donut.results = numeric()
for (t in 1:10){
x = rd.donut[[t]]$coef[3]
rd.donut.results = append(rd.donut.results,x)
}
xtable(rd.donut.results)
rd.donut.results
round(rd.donut,2)
round(rd.donut.results,2)
rbind(seq(1,10,1),rd.donut.results)
xtable(rbind(seq(1,10,1),rd.donut.results))
cutoffs = seq(-10,10,2)
rd.cutoffs = lapply(1:length(cutoffs), function(i) rdrobust(Y,x,c=cutoffs[i]))
cutoffs
## ECON675: ASSIGNMENT 5
## Q2: WEAK INSTRUMENTS SIMULATIONS
## Anirudh Yadav
## 11/19/2018
######################################################################
# Load packages, clear workspace
######################################################################
rm(list = ls())             #clear workspace
library(foreach)            #for looping
library(data.table)         #for data manipulation
library(Matrix)             #fast matrix calcs
library(ggplot2)            #for pretty plots
library(sandwich)           #for variance-covariance estimation
library(xtable)             #for latex tables
library(rdrobust)           #for RD plots and other stuff
library(rddensity)          #for RD density continuity tests
library(rdlocrand)          #for RD randomization inference
options(scipen = 999)       #forces R to use normal numbers instead of scientific notation
######################################################################
# Input data
######################################################################
setwd("/Users/Anirudh/Desktop/GitHub/PhD_Coursework/ECON675/HW6")
data <- as.data.table(read.csv('HeadStart.csv'))
######################################################################
# [2.1]A RD Plots of pre-intervention mortality
######################################################################
# Evenly-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "es",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-es.pdf')
dev.off()
# Evenly-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "esmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-esmv.pdf')
dev.off()
# Quantile-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qs",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qs.pdf')
dev.off()
# Quantile-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qsmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qsmv.pdf')
dev.off()
######################################################################
# [2.1]B Formal falsification tests
######################################################################
## Exact binomial tests for different windows around the cutoff
# Vector of windows
h.vec = seq(0.3,1.3,0.2)
# Get running variable
x     = data[,povrate60]
# Number of observations just above and below the cutoff
N.l   = sapply(1:length(h.vec),function(i) sum(x >= -h.vec[i] & x <=0))
N.u   = sapply(1:length(h.vec),function(i) sum(x >= 0 & x <= h.vec[i]))
# Total number of observations in the window
N.t   = N.l + N.u
# Conduct exact binomial tests (p=0.5), where success is treatment and store p-vals
binom.pvals = sapply(1:length(h.vec),function(i) binom.test(N.u[i],N.t[i])$p.value)
# Put results together for latex
binom.results = cbind(h.vec,N.l,N.u,binom.pvals)
xtable(binom.results,digits = c(0,1,0,0,3))
## Continuity in density tests (defaults are triangular kernel, jackknife SEs)
rdtest = rddensity(x)
######################################################################
# [2.2]A Global polynomial regression - constant treatment effect
######################################################################
# Create treatment dummy for regressions
treat=ifelse(data[,povrate60]>=0,1,0)
# Get outcome variable
Y = data[,mort_related_post]
# Generate covariates for polynomial regressions
X.pol = cbind(x,x^2,x^3,x^4,x^5,x^6)
# Run polynomial regressions
global.regs = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))]))
# Get point estimates
global.betas = sapply(1:4,function(i) global.regs[[i]]$coefficients[2])
# Get robust SEs
global.SEs   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs[[i]],"HC2")))[2])
# Put results together
global.results = rbind(global.betas, global.SEs)
colnames(global.results) = c(3,4,5,6)
xtable(global.results,digits=c(0,2,2,2,2))
# Plot fitted values and data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post")
points(x,global.regs[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-const.pdf')
dev.off()
######################################################################
# [2.2]B Global polynomial regression - fully interacted model
######################################################################
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + treat*X.pol[,c(1:(3+i))]))
# Get point estimates of treatment effect
global.betas.full = sapply(1:4,function(i) global.regs.full[[i]]$coefficients[2])
# Get robust SEs
global.SEs.full   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs.full[[i]],"HC2")))[2])
# Put results together
global.results.full = rbind(global.betas.full, global.SEs.full)
colnames(global.results.full) = c(3,4,5,6)
xtable(global.results.full,digits=c(0,2,2,2,2))
# Plot fitted values + data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post")
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-full.pdf')
dev.off()
######################################################################
# [2.3] Robust local polynomial methods
######################################################################
# MSE-optimal RD treatment effect estimates
rd.regs = lapply(0:2, function(i) rdrobust(Y,x,p=i,all=TRUE))
# Combine results for different polynomial orders
rd.p0   = cbind(rd.regs[[1]]$coef,rd.regs[[1]]$se,rd.regs[[1]]$ci)
rd.p1   = cbind(rd.regs[[2]]$coef,rd.regs[[2]]$se,rd.regs[[2]]$ci)
rd.p2   = cbind(rd.regs[[3]]$coef,rd.regs[[3]]$se,rd.regs[[3]]$ci)
xtable(rd.p0,digits=c(0,2,2,2,2))
xtable(rd.p1,digits=c(0,2,2,2,2))
xtable(rd.p2,digits=c(0,2,2,2,2))
# Placebo tests
rd.rob1 = rdrobust(data[,mort_related_pre],x,p=1,all=TRUE)
rd.rob2 = rdrobust(data[,mort_injury_post],x,p=1,all=TRUE)
rd.rob1.res   = cbind(rd.rob1$coef,rd.rob1$se,rd.rob1$ci)
rd.rob2.res   = cbind(rd.rob2$coef,rd.rob2$se,rd.rob2$ci)
xtable(rd.rob1.res,digits=c(0,2,2,2,2))
xtable(rd.rob2.res,digits=c(0,2,2,2,2))
# Different kernel/bandwiths
######################################################################
# [2.3] Donut holes
######################################################################
# Order data according to running variable
data.ordered = data[order(povrate60)]
x.ordered    = data.ordered[,povrate60]
y.ordered    = data.ordered[,mort_related_post]
# Get indexes of closest counties to the cutoff
i.below        = max(which(x.ordered<=0))
i.above        = min(which(x.ordered>=0))
# Run rdrobust for each donut hole!
rd.donut = lapply(0:9,function(i) rdrobust(y.ordered[-seq(i.below-i,i.above+i,1)],x.ordered[-seq(i.below-i,i.above+i,1)]))
cutoffs = seq(-10,10,2)
rd.cutoffs = lapply(1:length(cutoffs), function(i) rdrobust(Y,x,c=cutoffs[i]))
rd.cutoffs.results = numeric()
for (t in 1:length(cutoffs)){
ans = rbind(rd.cutoffs[[t]]$coef[3],rd.cutoffs[[t]]$pv[3])
rd.cutoffs.results = append(rd.donut.results,ans)
}
for (t in 1:length(cutoffs)){
ans = rbind(rd.cutoffs[[t]]$coef[3],rd.cutoffs[[t]]$pv[3])
rd.cutoffs.results = append(rd.cutoffs.results,ans)
}
rd.cutoffs.results
rbind(rd.cutoffs[[1]]$coef[3],rd.cutoffs[[1]]$pv[3])
View(rd.cutoffs)
rd.cutoffs.results = numeric()
for (t in 1:length(cutoffs)){
ans = rbind(rd.cutoffs[[t]]$coef[3],rd.cutoffs[[t]]$pv[3])
rd.cutoffs.results = cbind(rd.cutoffs.results,ans)
}
rd.cutoffs.results = numeric()
rd.cutoffs.results = numeric()
for (t in 1:length(cutoffs)){
ans = rbind(rd.cutoffs[[t]]$coef[3],rd.cutoffs[[t]]$pv[3])
rd.cutoffs.results = cbind(rd.cutoffs.results,ans)
}
View(rd.cutoffs)
rd.cutoffs.results
xtable(rd.cutoffs.results)
xtable(rbind(cutoffs,rd.cutoffs.results))
cutoffs
?round
round(cutoffs,0)
xtable(rbind(round(cutoffs,0),rd.cutoffs.results))
?mean
?if
ans = data[povrate60 >= -0.8 & povrate60 <=0, mort_related_post]
ans
ans = data[povrate60 >= -0.8 & povrate60 <=0, mean(mort_related_post)]
ans
T.diffmeans = sapply(1:length(windows), function(i) data[povrate60 >= 0 & povrate60 <=windows[i], mean(mort_related_post)]-data[povrate60 >= -windows[i] & povrate60 <=0, mean(mort_related_post)])
windows = seq(0.8,2.6,0.2)
N.1   = sapply(1:length(windows),function(i) sum(x >= -windows[i] & x <=0))
N.0   = sapply(1:length(windows),function(i) sum(x >= 0 & x <= windows[i]))
T.diffmeans = sapply(1:length(windows), function(i) data[povrate60 >= 0 & povrate60 <=windows[i], mean(mort_related_post)]-data[povrate60 >= -windows[i] & povrate60 <=0, mean(mort_related_post)])
T.diffmeans
N.0   = sapply(1:length(windows),function(i) sum(x >= -windows[i] & x <=0))
N.1   = sapply(1:length(windows),function(i) sum(x >= 0 & x <= windows[i]))
SD.0  = sapply(1:length(windos), function(i) data[povrate60 >= -windows[i] & povrate60 <=0, sd(mort_related_post)] )
windows = seq(0.8,2.6,0.2)
SD.0  = sapply(1:length(windos), function(i) data[povrate60 >= -windows[i] & povrate60 <=0, sd(mort_related_post)] )
SD.0  = sapply(1:length(windows), function(i) data[povrate60 >= -windows[i] & povrate60 <=0, sd(mort_related_post)] )
SD.1  = sapply(1:length(windows), function(i) data[povrate60 >= 0 & povrate60 <=windows[i], sd(mort_related_post)] )
SE.conserv = sqrt(S.0^2/N.0 + S.1^2/N.1)
SE.conserv = sqrt(SD.0^2/N.0 + SD.1^2/N.1)
SE.conserv
T.diffmeans
neyman.results = rbind(T.diffmeans, SE.conserv)
xtable(neyman.results)
neyman.results = rbind(windows,T.diffmeans, SE.conserv)
xtable(neyman.results)
View(data)
data[,treat:=treat]
lm(mort_related_post ~ treat, data=data)
lm(mort_related_post ~ treat, data=data[povrate60>=-0.8 & povrate60<=0.8])
ans = lm(mort_related_post ~ treat, data=data[povrate60>=-0.8 & povrate60<=0.8])
View(ans)
summary(ans)
neyman.regs = sapply(1:length(windows),function(i) lm(mort_related_post ~ treat,data=data[povrate60>=-windows[i] & povrate60<=windows[i]]))
View(neyman.regs)
# Run simple regressions for different windows
neyman.regs = lapply(1:length(windows),function(i) lm(mort_related_post ~ treat,data=data[povrate60>=-windows[i] & povrate60<=windows[i]]))
View(neyman.regs)
neyman.regs[[1]]$coefficients[2]
summary(neyman.regs[[1]])
summary(neyman.regs[[1]])[["coefficients"]][,"Std. Error"]
summary(neyman.regs[[1]])[["coefficients"]][,"Std. Error"][2]
summary(neyman.regs[[1]])[["coefficients"]]
summary(neyman.regs[[1]])[["coefficients"]][,Pr(>|t|)]
summary(neyman.regs[[1]])$coefficients
summary(neyman.regs[[1]])$coefficients[,4]
summary(neyman.regs[[1]])$coefficients[,4][2]
# Run simple regressions for different windows
neyman.regs = lapply(1:length(windows),function(i) lm(mort_related_post ~ treat,data=data[povrate60>=-windows[i] & povrate60<=windows[i]]))
# Get results
neyman.results = numeric()
for (t in 1:length(windows)){
ans = rbind(neyman.regs[[t]]$coefficients[2],summary(neyman.regs[[t]])$coefficients[,2][2],summary(neyman.regs[[t]])$coefficients[,4][2])
neyman.results = cbind(neyman.results,ans)
}
xtable(rbind(windows),neyman.results)
xtable(rbind(windows,neyman.results))
# Get robust SEs
neyman.SEs   = sapply(1:length(windows),function(i) sqrt(diag(vcovHC(neyman.regs[[i]],"HC2")))[2])
?pt
# Get point estimates
neyman.betas = sapply(1:length(windows), function(i) neyman.regs[[i]]$coefficients[2])
N.t   = N.0 + N.1
# Get p-vals
neyman.p     = sapply(1:length(windows),function(i) 2*pt(abs(neyman.betas[i]/neyman.SEs[i]),df=N.t[i]-2,lower.tail=FALSE))
neyman.p
# Get results
neyman.results = rbind(windows,neyman.betas,neyman.SEs,neyman.p)
xtable(neyman.results)
