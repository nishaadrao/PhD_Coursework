Y = data[,mort_related_post]
# Generate covariates for polynomial regressions
X.pol = cbind(x,x^2,x^3,x^4,x^5,x^6)
# Run polynomial regressions
global.regs = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))]))
# Get point estimates
global.betas = sapply(1:4,function(i) global.regs[[i]]$coefficients[2])
# Get robust SEs
global.SEs   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs[[i]],"HC2")))[2])
# Put results together
global.results = rbind(global.betas, global.SEs)
colnames(global.results) = c(3,4,5,6)
xtable(global.results,digits=c(0,2,2,2,2))
rep?
?rep
rep(treat,4)
length(rep(treat,4))
matrix(rep(treat,4),2,2)
?as.matrix
?matrix()
matrix(rep(treat,4),length(treat),4)
######################################################################
# [2.2]B Global polynomial regression - fully interacted model
######################################################################
treat.mat = matrix(rep(treat,6),length(treat),6)
t(treat.mat)
treat.mat
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + t(treat.mat)[c(1:3+i),]%*%X.pol[,c(1:(3+i))]))
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + t(treat.mat)[c(1:(3+i)),]%*%X.pol[,c(1:(3+i))]))
######################################################################
# [2.2]B Global polynomial regression - fully interacted model
######################################################################
treat.mat = matrix(rep(treat,6),length(treat),6)
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + t(treat.mat)[c(1:(3+i)),]%*%X.pol[,c(1:(3+i))]))
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + treat*X.pol[,c(1:(3+i))]))
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + treat*X.pol[,c(1:(3+i))]))
# Get robust SEs
global.SEs.full   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs.full[[i]],"HC2")))[2])
# Get point estimates of treatment effect
global.betas.full = sapply(1:4,function(i) global.regs.full[[i]]$coefficients[2])
# Get robust SEs
global.SEs.full   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs.full[[i]],"HC2")))[2])
# Put results together
global.results = rbind(global.betas.full, global.SEs.full)
# Put results together
global.results.full = rbind(global.betas.full, global.SEs.full)
colnames(global.results.full) = c(3,4,5,6)
xtable(global.results.full,digits=c(0,2,2,2,2))
plot(x,global.regs.full[[2]]$fitted.values)
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post")
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post",title="Fitted Values for a 4-th Order Polynomial Estimated on Both Sides of the Cutoff")
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post",title="Fitted Values for a 4-th Order Polynomial Estimated on Both Sides of the Cutoff")
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post")
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post", title"Hello")
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post", title="Hello")
?plot
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post", type=p)
?plot
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post", type="p")
?plot
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post", type="l")
?plot
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post", main="Hello")
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post", main="Hello",pch=19)
plot(x,global.regs.full[[2]]$fitted.values,xlab = "povrate60", ylab="mort_related_post", main="Hello",pch=20)
plot(x,Y,xlab = "povrate60", ylab="mort_related_post", main="Hello",pch=20)
rdplot(x,Y)
rdplot(Y,x)
rdplot(Y,x,col.lines="white")
rdplot(Y,x,col.lines="")
o = rdplot(Y,x,hide=TRUE)
View(o)
plot(x,o$vars_bins$rdplot_mean_y)
plot(o$vars_bins$rdplot_mean_x,o$vars_bins$rdplot_mean_y)
rdplot(Y,x)
plot(o$vars_bins$rdplot_mean_x,o$vars_bins$rdplot_mean_y)
plot(o$vars_bins$rdplot_mean_x,o$vars_bins$rdplot_mean_y,pch=20)
lines(x,global.regs.full[[2]]$fitted.values)
plot(o$vars_bins$rdplot_mean_x,o$vars_bins$rdplot_mean_y,pch=20)
points(x,global.regs.full[[2]]$fitted.values)
points(x,global.regs.full[[2]]$fitted.values,pch=20,col="green")
points(x,global.regs.full[[2]]$fitted.values,pch=20,col="red")
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="red")
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="blue")
plot(o$vars_bins$rdplot_mean_x,o$vars_bins$rdplot_mean_y,pch=20)
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="blue")
abline(x=0)
abline(v=0)
legend(0,0)
legend(0)
legend(0,c("data","fittedvals"))
legend(1,c("data","fittedvals"))
legend(5,c("data","fittedvals"))
# Plot fitted values + data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(o$vars_bins$rdplot_mean_x,o$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post",main="Fitted Values from 4-th Order Global Polynomial")
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
## ECON675: ASSIGNMENT 5
## Q2: WEAK INSTRUMENTS SIMULATIONS
## Anirudh Yadav
## 11/19/2018
######################################################################
# Load packages, clear workspace
######################################################################
rm(list = ls())             #clear workspace
library(foreach)            #for looping
library(data.table)         #for data manipulation
library(Matrix)             #fast matrix calcs
library(ggplot2)            #for pretty plots
library(sandwich)           #for variance-covariance estimation
library(xtable)             #for latex tables
library(rdrobust)           #for RD plots and other stuff
library(rddensity)          #for RD density continuity tests
library(rdlocrand)          #for RD randomization inference
options(scipen = 999)       #forces R to use normal numbers instead of scientific notation
######################################################################
# Input data
######################################################################
setwd("/Users/Anirudh/Desktop/GitHub/PhD_Coursework/ECON675/HW6")
data <- as.data.table(read.csv('HeadStart.csv'))
######################################################################
# [2.1]A RD Plots of pre-intervention mortality
######################################################################
# Evenly-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "es",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-es.pdf')
dev.off()
# Evenly-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "esmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-esmv.pdf')
dev.off()
# Quantile-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qs",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qs.pdf')
dev.off()
# Quantile-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qsmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qsmv.pdf')
dev.off()
######################################################################
# [2.1]B Formal falsification tests
######################################################################
## Exact binomial tests for different windows around the cutoff
# Vector of windows
h.vec = seq(0.3,1.3,0.2)
# Get running variable
x     = data[,povrate60]
# Number of observations just above and below the cutoff
N.l   = sapply(1:length(h.vec),function(i) sum(x >= -h.vec[i] & x <=0))
N.u   = sapply(1:length(h.vec),function(i) sum(x >= 0 & x <= h.vec[i]))
# Total number of observations in the window
N.t   = N.l + N.u
# Conduct exact binomial tests (p=0.5), where success is treatment and store p-vals
binom.pvals = sapply(1:length(h.vec),function(i) binom.test(N.u[i],N.t[i])$p.value)
# Put results together for latex
binom.results = cbind(h.vec,N.l,N.u,binom.pvals)
xtable(binom.results,digits = c(0,1,0,0,3))
## Continuity in density tests (defaults are triangular kernel, jackknife SEs)
rdtest = rddensity(x)
######################################################################
# [2.2]A Global polynomial regression - constant treatment effect
######################################################################
# Create treatment dummy for regressions
treat=ifelse(data[,povrate60]>=0,1,0)
# Get outcome variable
Y = data[,mort_related_post]
# Generate covariates for polynomial regressions
X.pol = cbind(x,x^2,x^3,x^4,x^5,x^6)
# Run polynomial regressions
global.regs = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))]))
# Get point estimates
global.betas = sapply(1:4,function(i) global.regs[[i]]$coefficients[2])
# Get robust SEs
global.SEs   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs[[i]],"HC2")))[2])
# Put results together
global.results = rbind(global.betas, global.SEs)
colnames(global.results) = c(3,4,5,6)
xtable(global.results,digits=c(0,2,2,2,2))
# Plot fitted values and data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,tem.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post",main="Fitted Values From 4-th Order Global Polynomial")
points(x,global.regs[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-const.pdf')
dev.off()
######################################################################
# [2.2]B Global polynomial regression - fully interacted model
######################################################################
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + treat*X.pol[,c(1:(3+i))]))
# Get point estimates of treatment effect
global.betas.full = sapply(1:4,function(i) global.regs.full[[i]]$coefficients[2])
# Get robust SEs
global.SEs.full   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs.full[[i]],"HC2")))[2])
# Put results together
global.results.full = rbind(global.betas.full, global.SEs.full)
colnames(global.results.full) = c(3,4,5,6)
xtable(global.results.full,digits=c(0,2,2,2,2))
# Plot fitted values + data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post",main="Fitted Values From 4-th Order Global Polynomial")
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-full.pdf')
dev.off()
## ECON675: ASSIGNMENT 5
## Q2: WEAK INSTRUMENTS SIMULATIONS
## Anirudh Yadav
## 11/19/2018
######################################################################
# Load packages, clear workspace
######################################################################
rm(list = ls())             #clear workspace
library(foreach)            #for looping
library(data.table)         #for data manipulation
library(Matrix)             #fast matrix calcs
library(ggplot2)            #for pretty plots
library(sandwich)           #for variance-covariance estimation
library(xtable)             #for latex tables
library(rdrobust)           #for RD plots and other stuff
library(rddensity)          #for RD density continuity tests
library(rdlocrand)          #for RD randomization inference
options(scipen = 999)       #forces R to use normal numbers instead of scientific notation
######################################################################
# Input data
######################################################################
setwd("/Users/Anirudh/Desktop/GitHub/PhD_Coursework/ECON675/HW6")
data <- as.data.table(read.csv('HeadStart.csv'))
######################################################################
# [2.1]A RD Plots of pre-intervention mortality
######################################################################
# Evenly-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "es",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-es.pdf')
dev.off()
# Evenly-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "esmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-esmv.pdf')
dev.off()
# Quantile-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qs",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qs.pdf')
dev.off()
# Quantile-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qsmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qsmv.pdf')
dev.off()
######################################################################
# [2.1]B Formal falsification tests
######################################################################
## Exact binomial tests for different windows around the cutoff
# Vector of windows
h.vec = seq(0.3,1.3,0.2)
# Get running variable
x     = data[,povrate60]
# Number of observations just above and below the cutoff
N.l   = sapply(1:length(h.vec),function(i) sum(x >= -h.vec[i] & x <=0))
N.u   = sapply(1:length(h.vec),function(i) sum(x >= 0 & x <= h.vec[i]))
# Total number of observations in the window
N.t   = N.l + N.u
# Conduct exact binomial tests (p=0.5), where success is treatment and store p-vals
binom.pvals = sapply(1:length(h.vec),function(i) binom.test(N.u[i],N.t[i])$p.value)
# Put results together for latex
binom.results = cbind(h.vec,N.l,N.u,binom.pvals)
xtable(binom.results,digits = c(0,1,0,0,3))
## Continuity in density tests (defaults are triangular kernel, jackknife SEs)
rdtest = rddensity(x)
######################################################################
# [2.2]A Global polynomial regression - constant treatment effect
######################################################################
# Create treatment dummy for regressions
treat=ifelse(data[,povrate60]>=0,1,0)
# Get outcome variable
Y = data[,mort_related_post]
# Generate covariates for polynomial regressions
X.pol = cbind(x,x^2,x^3,x^4,x^5,x^6)
# Run polynomial regressions
global.regs = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))]))
# Get point estimates
global.betas = sapply(1:4,function(i) global.regs[[i]]$coefficients[2])
# Get robust SEs
global.SEs   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs[[i]],"HC2")))[2])
# Put results together
global.results = rbind(global.betas, global.SEs)
colnames(global.results) = c(3,4,5,6)
xtable(global.results,digits=c(0,2,2,2,2))
# Plot fitted values and data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,tem.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post",main="Fitted Values From 4-th Order Global Polynomial")
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post",main="Fitted Values From 4-th Order Global Polynomial")
## ECON675: ASSIGNMENT 5
## Q2: WEAK INSTRUMENTS SIMULATIONS
## Anirudh Yadav
## 11/19/2018
######################################################################
# Load packages, clear workspace
######################################################################
rm(list = ls())             #clear workspace
library(foreach)            #for looping
library(data.table)         #for data manipulation
library(Matrix)             #fast matrix calcs
library(ggplot2)            #for pretty plots
library(sandwich)           #for variance-covariance estimation
library(xtable)             #for latex tables
library(rdrobust)           #for RD plots and other stuff
library(rddensity)          #for RD density continuity tests
library(rdlocrand)          #for RD randomization inference
options(scipen = 999)       #forces R to use normal numbers instead of scientific notation
######################################################################
# Input data
######################################################################
setwd("/Users/Anirudh/Desktop/GitHub/PhD_Coursework/ECON675/HW6")
data <- as.data.table(read.csv('HeadStart.csv'))
######################################################################
# [2.1]A RD Plots of pre-intervention mortality
######################################################################
# Evenly-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "es",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-es.pdf')
dev.off()
# Evenly-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "esmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-esmv.pdf')
dev.off()
# Quantile-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qs",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qs.pdf')
dev.off()
# Quantile-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qsmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qsmv.pdf')
dev.off()
######################################################################
# [2.1]B Formal falsification tests
######################################################################
## Exact binomial tests for different windows around the cutoff
# Vector of windows
h.vec = seq(0.3,1.3,0.2)
# Get running variable
x     = data[,povrate60]
# Number of observations just above and below the cutoff
N.l   = sapply(1:length(h.vec),function(i) sum(x >= -h.vec[i] & x <=0))
N.u   = sapply(1:length(h.vec),function(i) sum(x >= 0 & x <= h.vec[i]))
# Total number of observations in the window
N.t   = N.l + N.u
# Conduct exact binomial tests (p=0.5), where success is treatment and store p-vals
binom.pvals = sapply(1:length(h.vec),function(i) binom.test(N.u[i],N.t[i])$p.value)
# Put results together for latex
binom.results = cbind(h.vec,N.l,N.u,binom.pvals)
xtable(binom.results,digits = c(0,1,0,0,3))
## Continuity in density tests (defaults are triangular kernel, jackknife SEs)
rdtest = rddensity(x)
######################################################################
# [2.2]A Global polynomial regression - constant treatment effect
######################################################################
# Create treatment dummy for regressions
treat=ifelse(data[,povrate60]>=0,1,0)
# Get outcome variable
Y = data[,mort_related_post]
# Generate covariates for polynomial regressions
X.pol = cbind(x,x^2,x^3,x^4,x^5,x^6)
# Run polynomial regressions
global.regs = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))]))
# Get point estimates
global.betas = sapply(1:4,function(i) global.regs[[i]]$coefficients[2])
# Get robust SEs
global.SEs   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs[[i]],"HC2")))[2])
# Put results together
global.results = rbind(global.betas, global.SEs)
colnames(global.results) = c(3,4,5,6)
xtable(global.results,digits=c(0,2,2,2,2))
# Plot fitted values and data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post",main="Fitted Values From 4-th Order Global Polynomial")
points(x,global.regs[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-const.pdf')
dev.off()
######################################################################
# [2.2]B Global polynomial regression - fully interacted model
######################################################################
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + treat*X.pol[,c(1:(3+i))]))
# Get point estimates of treatment effect
global.betas.full = sapply(1:4,function(i) global.regs.full[[i]]$coefficients[2])
# Get robust SEs
global.SEs.full   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs.full[[i]],"HC2")))[2])
# Put results together
global.results.full = rbind(global.betas.full, global.SEs.full)
colnames(global.results.full) = c(3,4,5,6)
xtable(global.results.full,digits=c(0,2,2,2,2))
# Plot fitted values + data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post",main="Fitted Values From 4-th Order Global Polynomial")
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-full.pdf')
dev.off()
## ECON675: ASSIGNMENT 5
## Q2: WEAK INSTRUMENTS SIMULATIONS
## Anirudh Yadav
## 11/19/2018
######################################################################
# Load packages, clear workspace
######################################################################
rm(list = ls())             #clear workspace
library(foreach)            #for looping
library(data.table)         #for data manipulation
library(Matrix)             #fast matrix calcs
library(ggplot2)            #for pretty plots
library(sandwich)           #for variance-covariance estimation
library(xtable)             #for latex tables
library(rdrobust)           #for RD plots and other stuff
library(rddensity)          #for RD density continuity tests
library(rdlocrand)          #for RD randomization inference
options(scipen = 999)       #forces R to use normal numbers instead of scientific notation
######################################################################
# Input data
######################################################################
setwd("/Users/Anirudh/Desktop/GitHub/PhD_Coursework/ECON675/HW6")
data <- as.data.table(read.csv('HeadStart.csv'))
######################################################################
# [2.1]A RD Plots of pre-intervention mortality
######################################################################
# Evenly-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "es",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-es.pdf')
dev.off()
# Evenly-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "esmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-esmv.pdf')
dev.off()
# Quantile-spaced bins, IMSE optimal
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qs",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qs.pdf')
dev.off()
# Quantile-spaced bins, mimicking variance
rdplot(data[,mort_related_pre],data[,povrate60],p=1,binselect = "qsmv",x.label="povrate60",y.label="mort_related_pre",title="")
dev.copy(pdf,'q2-1-qsmv.pdf')
dev.off()
######################################################################
# [2.1]B Formal falsification tests
######################################################################
## Exact binomial tests for different windows around the cutoff
# Vector of windows
h.vec = seq(0.3,1.3,0.2)
# Get running variable
x     = data[,povrate60]
# Number of observations just above and below the cutoff
N.l   = sapply(1:length(h.vec),function(i) sum(x >= -h.vec[i] & x <=0))
N.u   = sapply(1:length(h.vec),function(i) sum(x >= 0 & x <= h.vec[i]))
# Total number of observations in the window
N.t   = N.l + N.u
# Conduct exact binomial tests (p=0.5), where success is treatment and store p-vals
binom.pvals = sapply(1:length(h.vec),function(i) binom.test(N.u[i],N.t[i])$p.value)
# Put results together for latex
binom.results = cbind(h.vec,N.l,N.u,binom.pvals)
xtable(binom.results,digits = c(0,1,0,0,3))
## Continuity in density tests (defaults are triangular kernel, jackknife SEs)
rdtest = rddensity(x)
######################################################################
# [2.2]A Global polynomial regression - constant treatment effect
######################################################################
# Create treatment dummy for regressions
treat=ifelse(data[,povrate60]>=0,1,0)
# Get outcome variable
Y = data[,mort_related_post]
# Generate covariates for polynomial regressions
X.pol = cbind(x,x^2,x^3,x^4,x^5,x^6)
# Run polynomial regressions
global.regs = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))]))
# Get point estimates
global.betas = sapply(1:4,function(i) global.regs[[i]]$coefficients[2])
# Get robust SEs
global.SEs   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs[[i]],"HC2")))[2])
# Put results together
global.results = rbind(global.betas, global.SEs)
colnames(global.results) = c(3,4,5,6)
xtable(global.results,digits=c(0,2,2,2,2))
# Plot fitted values and data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post")
points(x,global.regs[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-const.pdf')
dev.off()
######################################################################
# [2.2]B Global polynomial regression - fully interacted model
######################################################################
# Run fully-interacted polynomial regressions
global.regs.full = lapply(0:3,function(i) lm(Y ~ treat + X.pol[,c(1:(3+i))] + treat*X.pol[,c(1:(3+i))]))
# Get point estimates of treatment effect
global.betas.full = sapply(1:4,function(i) global.regs.full[[i]]$coefficients[2])
# Get robust SEs
global.SEs.full   = sapply(1:4,function(i) sqrt(diag(vcovHC(global.regs.full[[i]],"HC2")))[2])
# Put results together
global.results.full = rbind(global.betas.full, global.SEs.full)
colnames(global.results.full) = c(3,4,5,6)
xtable(global.results.full,digits=c(0,2,2,2,2))
# Plot fitted values + data
temp.rd = rdplot(Y,x,hide=TRUE)
plot(temp.rd$vars_bins$rdplot_mean_x,temp.rd$vars_bins$rdplot_mean_y,pch=20,xlab="povrate60",ylab="mort_related_post")
points(x,global.regs.full[[2]]$fitted.values,pch=6,col="blue")
abline(v=0)
dev.copy(pdf,'q2-2-full.pdf')
dev.off()
